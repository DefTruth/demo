// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: single_enum.proto

#ifndef PROTOBUF_INCLUDED_single_5fenum_2eproto
#define PROTOBUF_INCLUDED_single_5fenum_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_single_5fenum_2eproto 

namespace protobuf_single_5fenum_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_single_5fenum_2eproto
class Example1;
class Example1DefaultTypeInternal;
extern Example1DefaultTypeInternal _Example1_default_instance_;
namespace google {
namespace protobuf {
template<> ::Example1* Arena::CreateMaybeMessage<::Example1>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Example1_COLOR {
  Example1_COLOR_YELLOW = 0,
  Example1_COLOR_RED = 1,
  Example1_COLOR_BLACK = 2,
  Example1_COLOR_WHITE = 3,
  Example1_COLOR_BLUE = 4,
  Example1_COLOR_Example1_COLOR_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Example1_COLOR_Example1_COLOR_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Example1_COLOR_IsValid(int value);
const Example1_COLOR Example1_COLOR_COLOR_MIN = Example1_COLOR_YELLOW;
const Example1_COLOR Example1_COLOR_COLOR_MAX = Example1_COLOR_BLUE;
const int Example1_COLOR_COLOR_ARRAYSIZE = Example1_COLOR_COLOR_MAX + 1;

const ::google::protobuf::EnumDescriptor* Example1_COLOR_descriptor();
inline const ::std::string& Example1_COLOR_Name(Example1_COLOR value) {
  return ::google::protobuf::internal::NameOfEnum(
    Example1_COLOR_descriptor(), value);
}
inline bool Example1_COLOR_Parse(
    const ::std::string& name, Example1_COLOR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Example1_COLOR>(
    Example1_COLOR_descriptor(), name, value);
}
// ===================================================================

class Example1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example1) */ {
 public:
  Example1();
  virtual ~Example1();

  Example1(const Example1& from);

  inline Example1& operator=(const Example1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Example1(Example1&& from) noexcept
    : Example1() {
    *this = ::std::move(from);
  }

  inline Example1& operator=(Example1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Example1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Example1* internal_default_instance() {
    return reinterpret_cast<const Example1*>(
               &_Example1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Example1* other);
  friend void swap(Example1& a, Example1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Example1* New() const final {
    return CreateMaybeMessage<Example1>(NULL);
  }

  Example1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Example1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Example1& from);
  void MergeFrom(const Example1& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Example1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Example1_COLOR COLOR;
  static const COLOR YELLOW =
    Example1_COLOR_YELLOW;
  static const COLOR RED =
    Example1_COLOR_RED;
  static const COLOR BLACK =
    Example1_COLOR_BLACK;
  static const COLOR WHITE =
    Example1_COLOR_WHITE;
  static const COLOR BLUE =
    Example1_COLOR_BLUE;
  static inline bool COLOR_IsValid(int value) {
    return Example1_COLOR_IsValid(value);
  }
  static const COLOR COLOR_MIN =
    Example1_COLOR_COLOR_MIN;
  static const COLOR COLOR_MAX =
    Example1_COLOR_COLOR_MAX;
  static const int COLOR_ARRAYSIZE =
    Example1_COLOR_COLOR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  COLOR_descriptor() {
    return Example1_COLOR_descriptor();
  }
  static inline const ::std::string& COLOR_Name(COLOR value) {
    return Example1_COLOR_Name(value);
  }
  static inline bool COLOR_Parse(const ::std::string& name,
      COLOR* value) {
    return Example1_COLOR_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Example1.COLOR colorVal = 1;
  void clear_colorval();
  static const int kColorValFieldNumber = 1;
  ::Example1_COLOR colorval() const;
  void set_colorval(::Example1_COLOR value);

  // @@protoc_insertion_point(class_scope:Example1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int colorval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_single_5fenum_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Example1

// .Example1.COLOR colorVal = 1;
inline void Example1::clear_colorval() {
  colorval_ = 0;
}
inline ::Example1_COLOR Example1::colorval() const {
  // @@protoc_insertion_point(field_get:Example1.colorVal)
  return static_cast< ::Example1_COLOR >(colorval_);
}
inline void Example1::set_colorval(::Example1_COLOR value) {
  
  colorval_ = value;
  // @@protoc_insertion_point(field_set:Example1.colorVal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Example1_COLOR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Example1_COLOR>() {
  return ::Example1_COLOR_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_single_5fenum_2eproto
